import pandas as pd
import numpy as np
import matplotlib
matplotlib.rcParams['font.sans-serif'] = ['Arial']  # 使用英文字体
matplotlib.rcParams['axes.unicode_minus'] = False  # 正常显示负号
import matplotlib.pyplot as plt

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error
from datetime import datetime, timedelta
from io import StringIO  # 用于模拟字符串成文件对象

# ---- 原始数据 ----
# 数据来源于B站up主创作中心 阿B最多只提供了三个月的数据
CSV_DATA = """时间,播放量,累计粉丝,点赞,收藏,硬币,评论,弹幕,分享,充电
历史累计,761823,4856,27838,32216,13920,4140,886,7664,97
2024/10/15,743648,4737,27034,31305,13239,4094,878,7563,97
2024/10/16,743836,4737,27042,31309,13243,4094,880,7564,97
2024/10/17,744030,4741,27048,31312,13251,4095,880,7564,97
2024/10/18,744245,4741,27057,31316,13255,4097,880,7566,97
2024/10/19,744410,4743,27065,31319,13261,4098,880,7567,97
2024/10/20,744576,4745,27070,31320,13265,4098,880,7568,97
2024/10/21,744797,4747,27076,31327,13267,4098,880,7569,97
2024/10/22,745002,4746,27088,31348,13278,4101,880,7571,97
2024/10/23,745252,4748,27094,31361,13280,4104,880,7573,97
2024/10/24,745434,4750,27098,31360,13284,4107,880,7573,97
2024/10/25,745567,4749,27103,31362,13286,4109,880,7575,97
2024/10/26,745670,4751,27106,31367,13288,4109,880,7575,97
2024/10/27,745796,4752,27107,31370,13289,4109,880,7575,97
2024/10/28,745954,4752,27112,31372,13294,4109,880,7575,97
2024/10/29,746093,4755,27112,31372,13294,4109,880,7575,97
2024/10/30,746245,4756,27118,31378,13297,4109,880,7576,97
2024/10/31,746381,4759,27121,31390,13299,4109,880,7578,97
2024/11/01,746491,4757,27125,31394,13299,4115,880,7581,97
2024/11/02,746625,4759,27128,31400,13301,4120,880,7581,97
2024/11/03,746772,4758,27134,31405,13305,4120,880,7582,97
2024/11/04,746967,4757,27146,31411,13318,4121,880,7582,97
2024/11/05,747177,4758,27152,31423,13322,4114,879,7583,97
2024/11/06,747385,4760,27159,31432,13336,4115,879,7583,97
2024/11/07,747571,4761,27166,31442,13342,4115,879,7585,97
2024/11/08,747740,4761,27172,31450,13348,4115,879,7587,97
2024/11/09,747871,4763,27177,31456,13350,4116,879,7587,97
2024/11/10,748078,4765,27184,31466,13362,4117,879,7587,97
2024/11/11,748288,4766,27195,31469,13371,4118,879,7589,97
2024/11/12,748478,4768,27201,31478,13377,4118,879,7589,97
2024/11/13,748642,4767,27206,31485,13377,4118,879,7590,97
2024/11/14,748788,4768,27211,31494,13384,4118,880,7592,97
2024/11/15,748951,4768,27219,31503,13386,4116,880,7592,97
2024/11/16,749060,4770,27220,31502,13387,4116,880,7594,97
2024/11/17,749206,4772,27228,31504,13389,4118,880,7595,97
2024/11/18,749389,4772,27234,31516,13394,4118,880,7595,97
2024/11/19,749537,4774,27238,31519,13396,4112,880,7596,97
2024/11/20,749674,4775,27245,31523,13404,4102,880,7598,97
2024/11/21,749921,4769,27260,31529,13416,4111,880,7600,97
2024/11/22,750382,4765,27287,31537,13438,4115,880,7601,97
2024/11/23,750602,4765,27303,31546,13453,4116,880,7601,97
2024/11/24,750857,4766,27321,31556,13471,4113,880,7602,97
2024/11/25,751099,4768,27334,31560,13491,4118,880,7604,97
2024/11/26,751412,4769,27347,31577,13505,4118,880,7604,97
2024/11/27,751575,4770,27350,31583,13505,4118,880,7604,97
2024/11/28,751718,4771,27354,31583,13507,4119,880,7604,97
2024/11/29,751853,4772,27371,31579,13539,4119,880,7604,97
2024/11/30,751983,4773,27375,31583,13543,4121,880,7604,97
2024/12/01,752132,4777,27382,31594,13551,4122,881,7604,97
2024/12/02,752360,4777,27384,31604,13555,4122,881,7608,97
2024/12/03,752554,4781,27392,31617,13562,4123,881,7610,97
2024/12/04,752749,4782,27396,31625,13566,4123,881,7611,97
2024/12/05,752933,4783,27401,31633,13572,4123,881,7611,97
2024/12/06,753093,4783,27405,31643,13573,4123,881,7612,97
2024/12/07,753218,4785,27406,31647,13575,4123,881,7612,97
2024/12/08,753389,4789,27413,31657,13579,4124,881,7615,97
2024/12/09,753606,4795,27427,31667,13589,4125,881,7616,97
2024/12/10,753826,4797,27437,31684,13598,4126,881,7620,97
2024/12/11,754070,4800,27445,31700,13602,4126,881,7621,97
2024/12/12,754333,4804,27460,31720,13610,4126,881,7625,97
2024/12/13,754594,4806,27481,31739,13625,4125,881,7626,97
2024/12/14,754873,4808,27495,31758,13631,4125,882,7629,97
2024/12/15,755274,4808,27518,31790,13654,4125,882,7630,97
2024/12/16,755677,4814,27542,31830,13668,4127,883,7631,97
2024/12/17,756065,4819,27564,31863,13683,4128,884,7632,97
2024/12/18,756414,4821,27578,31888,13694,4129,885,7635,97
2024/12/19,756709,4823,27591,31901,13705,4130,885,7635,97
2024/12/20,756936,4824,27602,31915,13714,4130,885,7639,97
2024/12/21,757146,4828,27611,31928,13717,4131,885,7640,97
2024/12/22,757398,4828,27624,31943,13724,4132,885,7642,97
2024/12/23,757783,4831,27646,31972,13746,4133,885,7644,97
2024/12/24,758135,4835,27658,31986,13752,4132,886,7645,97
2024/12/25,758450,4834,27677,32016,13764,4133,886,7646,97
2024/12/26,758778,4836,27691,32043,13776,4138,886,7649,97
2024/12/27,759012,4837,27703,32061,13785,4133,886,7651,97
2024/12/28,759254,4840,27714,32076,13795,4133,886,7653,97
2024/12/29,759480,4838,27737,32089,13825,4135,886,7654,97
2024/12/30,759696,4838,27747,32098,13833,4136,886,7657,97
2024/12/31,759845,4840,27750,32103,13835,4136,886,7657,97
2025/01/01,759987,4841,27760,32112,13843,4136,886,7658,97
2025/01/02,760232,4844,27771,32137,13857,4136,886,7659,97
2025/01/03,760413,4846,27780,32148,13867,4136,886,7660,97
2025/01/04,760584,4846,27784,32155,13873,4136,886,7660,97
2025/01/05,760763,4847,27792,32167,13885,4137,886,7660,97
2025/01/06,760930,4846,27799,32170,13891,4139,886,7661,97
2025/01/07,761121,4851,27805,32175,13897,4140,886,7661,97
2025/01/08,761265,4854,27815,32190,13899,4140,886,7662,97
2025/01/09,761407,4854,27821,32196,13907,4140,886,7662,97
2025/01/10,761507,4853,27826,32201,13911,4140,886,7662,97
2025/01/11,761644,4853,27831,32206,13915,4140,886,7662,97
2025/01/12,761823,4855,27838,32216,13920,4140,886,7664,97
"""

# ---- 数据基本预处理 ----
df = pd.read_csv(
    StringIO(CSV_DATA),  # 如果有真实csv文件，请换成 open("xxx.csv","r")
    skiprows=[0, 1],  # 跳过第一行和第二行（行索引从0开始）
    names=["date", "plays", "fans", "likes", "fav", "coins", "comments", "danmu", "share", "charge"]
)

# 转日期格式、排序
df["date"] = pd.to_datetime(df["date"], format="%Y/%m/%d")
df = df.sort_values("date").reset_index(drop=True)

# 只保留日期数据
start_date = pd.to_datetime("2024-10-15")
end_date = pd.to_datetime("2025-01-12")
df = df[(df["date"] >= start_date) & (df["date"] <= end_date)].copy()

# ---- 计算日增量 (第一天设为0，其后 = 当天累计 - 昨天累计) ----
use_cols = ["plays", "fans", "likes", "fav", "coins", "comments", "danmu"]
for col in use_cols:
    df[f"inc_{col}"] = 0  # 先建列

for i in range(len(df)):
    if i == 0:
        # 第一天全部设为0
        continue
    else:
        for col in use_cols:
            df.loc[df.index[i], f"inc_{col}"] = df.loc[df.index[i], col] - df.loc[df.index[i - 1], col]


# ---- 构建特征(前XX天的日增量)和标签(当日的日增量)，并训练7个独立模型 ----

def build_sliding_features(series, window_size=7):
    """
    给定一列series(日增量)，返回 (X, y, valid_dates):
      X: (n, window_size) 数组
      y: (n,) 标签
      valid_dates: 与 X,y 对应的日期(预测目标日)
    其中第 t 条样本用 (t-1, t-2, ..., t-7) 的值预测第 t 的值，所以
    t 从 7 开始才有完整特征。
    """
    vals = series.values
    dates = df["date"].values

    X_list = []
    y_list = []
    date_list = []

    for i in range(window_size, len(vals)):
        feat = vals[i - window_size: i]  # 前window_size天
        X_list.append(feat)
        y_list.append(vals[i])  # 当前天
        date_list.append(dates[i])

    X_arr = np.array(X_list)
    y_arr = np.array(y_list)
    return X_arr, y_arr, np.array(date_list)


models_info = {}

from sklearn.linear_model import LinearRegression

for col in use_cols:
    # 1) 构建训练数据
    X_all, y_all, date_all = build_sliding_features(df[f"inc_{col}"], window_size=7)

    # 2) 划分 (train+val) vs test
    mask_train_val = date_all < pd.to_datetime("2025-01-01")
    mask_test = date_all >= pd.to_datetime("2025-01-01")

    X_train_val = X_all[mask_train_val]
    y_train_val = y_all[mask_train_val]
    date_train_val = date_all[mask_train_val]

    X_test = X_all[mask_test]
    y_test = y_all[mask_test]
    date_test = date_all[mask_test]

    # 3) 我们这里不再单独留验证集(或直接将 train_val 80%-20% 划分都放一起)，只做简单示例
    X_train = X_train_val
    y_train = y_train_val

    model = LinearRegression()
    if len(X_train) > 0:
        model.fit(X_train, y_train)

    # 4) 在测试集上评估
    from sklearn.metrics import mean_absolute_error
    if len(X_test) > 0:
        y_test_pred = model.predict(X_test)
        test_mae = mean_absolute_error(y_test, y_test_pred)
    else:
        y_test_pred = []
        test_mae = None

    models_info[col] = {
        "model": model,
        "test_mae": test_mae,
        "date_test": date_test,
        "y_test": y_test,
        "y_test_pred": y_test_pred
    }

# ---- 打印测试结果 ----
print("===== Model Training & Testing Done =====")
for col in use_cols:
    info = models_info[col]
    print(f"{col} -> Test MAE: {info['test_mae']}")

# ---- 5. 测试集 可视化(真实 vs. 预测) ----
n_plots = len(use_cols)
fig, axes = plt.subplots(n_plots, 1, figsize=(8, 4 * n_plots))

if n_plots == 1:
    axes = [axes]

for i, col in enumerate(use_cols):
    ax = axes[i]
    info = models_info[col]
    dates = info["date_test"]
    y_true = info["y_test"]
    y_pred = info["y_test_pred"]

    if len(dates) == 0:
        ax.set_title(f"{col} (No Test Data)")
        ax.grid()
        continue

    ax.plot(dates, y_true, label="True", marker="o")
    ax.plot(dates, y_pred, label="Pred", marker="x")
    mae_str = f"{info['test_mae']:.2f}" if info['test_mae'] else "NA"
    ax.set_title(f"{col} (Test MAE={mae_str})")
    ax.legend()
    ax.grid()

plt.tight_layout()
plt.show()

# --------------------------------------------------------------------------
# ================== 新增: 预测未来若干天的日增量 ===========================
# --------------------------------------------------------------------------

def predict_future_increments(model, last_7_incs, num_future_days=7):
    """
    使用给定模型, 从 last_7_incs(长度7的数组) 开始滚动预测, 预测 future_days天.
    返回一个 list, 每个元素是一天的预测日增量.
    注意：这里是“单指标”模型，故只预测一串数.
    """
    predictions = []
    window = list(last_7_incs)  # 拷贝一下
    for _ in range(num_future_days):
        x_input = np.array(window).reshape(1, -1)  # (1,7)
        # 预测下一天
        y_pred = model.predict(x_input)[0]
        predictions.append(y_pred)
        # 滚动: 加入预测, 去掉最早
        window.pop(0)
        window.append(y_pred)
    return predictions

# 假设我们要预测 “未来 7 天” (从 2025/01/13 到 2025/01/19) 的日增量
num_future_days = 7

# 获取我们在历史数据中最后的 7 天增量(就是 2025/01/06~2025/01/12)
# df.tail(7) 就是最后7行
last_7_df = df.tail(7)

print("\n===== Future Predictions =====\n")

future_prediction_results = {}

for col in use_cols:
    # 1) 取出最后7天的日增量
    last_7_incs = last_7_df[f"inc_{col}"].values  # array of length 7
    # 2) 拿到对应模型
    model = models_info[col]["model"]
    # 3) 做滚动预测
    future_incs = predict_future_increments(model, last_7_incs, num_future_days=num_future_days)
    future_prediction_results[col] = future_incs

# 我们可以把这些预测结果与具体日期绑定(从 2025-01-13 开始)
start_future_date = pd.to_datetime("2025-01-13")  # 紧接着 2025-01-12 之后
dates_future = [start_future_date + pd.Timedelta(days=i) for i in range(num_future_days)]

# 打印结果
for col in use_cols:
    print(f"--- Future daily increments for '{col}' ---")
    preds = future_prediction_results[col]
    for i in range(num_future_days):
        print(f"  {dates_future[i].strftime('%Y-%m-%d')}: {preds[i]:.2f}")
    print()